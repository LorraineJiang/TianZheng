using UnityEngine;
using Mono.Data.Sqlite;
using System;
using System.Text;

///<summary>
///sqlite数据库辅助类
///</summary>
public class SqliteDbHelper
{
    private SqliteConnection dbConnection;
    private SqliteCommand dbCommand;
    private SqliteDataReader dbReader;

    public SqliteDbHelper(string conStr)
    {
        OpenSQLite(conStr);
    }

    /// <summary>
    /// 打开数据库
    /// </summary>
    /// <param name="dbPath">数据库文件的所在路径</param>
    public void OpenSQLite(string dbPath)
    {
        try
        {
            dbConnection = new SqliteConnection("data source =" + dbPath);
            dbConnection.Open();
            //Debug.Log("Connect successful!");
        }
        catch (Exception ex)
        {
            Debug.Log(ex.Message);
        }
    }

    /// <summary>
    /// 创建表
    /// </summary>
    /// <param name="tabName">表名</param>
    /// <param name="col">属性名</param>
    /// <param name="colType">属性类型名</param>
    /// <returns></returns>
    public SqliteDataReader CreateTable(string tabName, string[] col, string[] colType)
    {
        if (col.Length != colType.Length)
        {
            throw new SqliteException("columns.Length != colType.Length");
        }

        string query = "CREATE TABLE " + tabName + " (" + col[0] + " " + colType[0];

        for (int i = 1; i < col.Length; ++i)
        {
            query += ", " + col[i] + " " + colType[i];
        }

        query += ")";

        return ExecuteQuery(query);
    }

    /// <summary>
    /// 关闭数据库
    /// </summary>
    public void CloseSqlConnection()

    {
        if (dbCommand != null)
        {
            dbCommand.Dispose();
        }
        dbCommand = null;

        if (dbReader != null)
        {
            dbReader.Dispose();
        }
        dbReader = null;

        if (dbConnection != null)
        {
            dbConnection.Close();
        }
        dbConnection = null;

        Debug.Log("Disconnected from db.");
    }

    //执行sqlQuery操作 
    public SqliteDataReader ExecuteQuery(string sqlQuery)
    {
        try
        {
            dbCommand = dbConnection.CreateCommand();
            dbCommand.CommandText = sqlQuery;
            dbReader = dbCommand.ExecuteReader();

            return dbReader;
        }
        catch(Exception e)
        {
            ShowError(e.ToString());
            return null;
        }
    }

    //插入数据
    public SqliteDataReader InsertInto(string tableName, string[] values)
    {
        string query = "INSERT INTO " + tableName + " VALUES (" + values[0];

        for (int i = 1; i < values.Length; ++i)
        {
            query += ", " + values[i];
        }

        query += ")";

        return ExecuteQuery(query);
    }

    //查找表中所有数据
    public SqliteDataReader ReadFullTable(string tableName)
    {
        string query = "SELECT * FROM " + tableName;

        return ExecuteQuery(query);
    }
    //查询对应列中的数据
    public SqliteDataReader ReadColumnValue(string tableName, string columnName)
    {
        string query = string.Format("SELECT {1} FROM {0}", tableName, columnName);
        return ExecuteQuery(query);
    }

    //查找表中指定数据
    public SqliteDataReader SelectSpecificData(string tableName, string selectkey, string selectvalue)
    {
        string query = "SELECT * FROM " + tableName + " where " + selectkey + " = " + selectvalue + " ";

        return ExecuteQuery(query);
    }
    //根据条件查询表中的数据
    public SqliteDataReader SelectByConditions(string tableName,string selectResultKey, string[] columns, string[] columValues)
    {
        if (columns.Length > columValues.Length)
        {
            Debug.LogError("select colum count > columvalue count");
            return null;
        }
        StringBuilder strB = new StringBuilder();
        for (int i = 0; i < columns.Length; i++)
        {
            strB.Append(columns[i]).Append(" = ").Append(string.Format("\"{0}\"", columValues[i]));
            if (i < columns.Length-1)
                strB.Append(" and ");
        }
        string query = string.Format("SELECT {0} FROM {1} where {2}", selectResultKey, tableName, strB.ToString());
        return ExecuteQuery(query);
    }

    //更新数据  SQL语法：UPDATE table_name SET column1 = value1, column2 = value2....columnN = valueN[WHERE  CONDITION];
    public SqliteDataReader UpdateInto(string tableName, string[] cols, string[] colsvalues, string selectkey, string selectvalue)
    {
        string query = "UPDATE " + tableName + " SET " + cols[0] + " = " + colsvalues[0];

        for (int i = 1; i < colsvalues.Length; ++i)
        {
            query += ", " + cols[i] + " =" + colsvalues[i];
        }

        query += " WHERE " + selectkey + " = " + selectvalue + " ";
        return ExecuteQuery(query);
    }

    /// <summary>
    /// 删除表中的内容
    /// </summary>
    /// <param name="tableName">表名</param>
    /// <param name="cols">属性名</param>
    /// <param name="colsvalues">属性对应的值（判断条件）</param>
    /// <returns></returns>
    public SqliteDataReader Delete(string tableName, string[] cols, string[] colsvalues)
    {
        string query = "DELETE FROM " + tableName + " WHERE " + cols[0] + " = " + colsvalues[0];

        for (int i = 1; i < colsvalues.Length; ++i)
        {
            query += " or " + cols[i] + " = " + colsvalues[i];
        }

        return ExecuteQuery(query);
    }
    /// <summary>
    /// 删除表中所有数据
    /// </summary>
    /// <param name="tableName">表名</param>
    /// <returns></returns>
    public SqliteDataReader Delete(string tableName)
    {
        string query = "DELETE FROM " + tableName;
        return ExecuteQuery(query);
    }

    //插入指定的数据
    public SqliteDataReader InsertIntoSpecific(string tableName, string[] cols, string[] values)
    {
        if (cols.Length != values.Length)
        {
            throw new SqliteException("columns.Length != values.Length");
        }

        string query = "INSERT INTO " + tableName + "(" + cols[0];

        for (int i = 1; i < cols.Length; ++i)
        {
            query += ", " + cols[i];
        }

        query += ") VALUES (" + values[0];

        for (int i = 1; i < values.Length; ++i)
        {
            query += ", " + values[i];
        }

        query += ")";

        return ExecuteQuery(query);
    }

    //判断在指定列名中是否存在输入的值
    public bool ExitItem(string tableName, string itemName, string itemValue)
    {
        bool flag = false;

        dbReader = ReadFullTable(tableName);

        while (dbReader.Read())
        {
            for (int i = 0; i < dbReader.FieldCount; i++)
            {
                if (dbReader.GetName(i) == itemName)
                {
                    if (dbReader.GetValue(i).ToString() == itemValue)
                    {
                        flag = true;
                        break;
                    }
                }
            }
        }

        return flag;
    }

    private void ShowError(string content)
    {
        Loxodon.Framework.Interactivity.DialogNotification notification = new Loxodon.Framework.Interactivity.DialogNotification(R.application_error, content, R.application_sure, false);
        //对话框的回调函数
        Action<Loxodon.Framework.Interactivity.DialogNotification> callback = n =>
        {
            //this.showTitleNullCmd.Enabled = true;
            if (n.DialogResult == Loxodon.Framework.Views.AlertDialog.BUTTON_POSITIVE)
            {
            }
            else if (n.DialogResult == Loxodon.Framework.Views.AlertDialog.BUTTON_NEGATIVE)
            {
            }
        };
        //显示消息框
        Loxodon.Framework.Views.AlertDialog.ShowMessage(notification.Message, notification.Title, notification.ConfirmButtonText, null, notification.CancelButtonText, notification.CanceledOnTouchOutside, (result) =>
        {
            notification.DialogResult = result;
            if (callback != null)
                callback(notification);
        });
    }
}
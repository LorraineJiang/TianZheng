using System.Collections;
using System.Collections.Generic;
using System.Text;
using UnityEngine;
using UnityEngine.UI;
using Loxodon.Framework.Views;
using Loxodon.Framework.Binding;
using Loxodon.Framework.Binding.Builder;
using Loxodon.Framework.Interactivity;

/// <summary>
/// 建筑信息显示界面
/// </summary>
public class InformationWindow : Window
{
    public Text title;
    public Text information;
    public Text relativeInformation;
    public Image image;
    public Button closeButton;
    public Button modifyButton;
    public Button clearButton;
    public Button enterButton;
    public GameObject scrollView;
    public RectTransform monitorButtonPannel;      //监视按钮pannnel
    public RectTransform valveButtonPannel;        //阀门按钮pannel
    private GameObject sceneItem;    //当前信息对应的物体
    private string originTable;
    private string originKeyValue;
    private InformationViewModel viewModel;
    protected override void OnCreate(IBundle bundle)
    {
        viewModel = new InformationViewModel();

        BindingSet<InformationWindow, InformationViewModel> bindingSet = this.CreateBindingSet(viewModel);
        bindingSet.Bind(this.title).For(v => v.text).To(vm => vm.Name).OneWay();
        bindingSet.Bind(this.information).For(v => v.text).To(vm => vm.Info).OneWay();

        //TODO 图片的显示

        bindingSet.Bind(this.modifyButton).For(v => v.onClick).To(vm => vm.ModifyCmd);
        bindingSet.Bind(this.clearButton).For(v => v.onClick).To(vm => vm.ClearCmd);
        bindingSet.Bind(this.closeButton).For(v => v.onClick).To(vm => vm.CloseCmd);
        bindingSet.Bind(this.enterButton).For(v => v.onClick).To(vm => vm.EnterCmd);
        bindingSet.Bind().For(v => v.ClearDialogWindow).To(vm => vm.InterClearDialog);
        bindingSet.Bind().For(v => v.ClearData).To(vm => vm.InterClear);
        bindingSet.Bind().For(v => v.Close).To(vm => vm.InterClose);

        bindingSet.Build();
        //屏蔽主相机射线检测
        MainCameraController.Instance.mIsActiveRaycster = false;
        MainCameraController.Instance.mIsActive = false;
        //设置管理员可以修改
        modifyButton.gameObject.SetActive(User.Instance.IsAdmin);
        clearButton.gameObject.SetActive(User.Instance.IsAdmin);
    }
    protected override void Start()
    {
        base.Start();
        StartCoroutine(UpdateInfomation());
    }
    public override void DoDismiss()
    {
        //窗口关闭时，报警物体时自动创建/删除 报警粒子，TODO 根据表名来判断？
        if (viewModel.RelativeTable == "AlertItem")
        {
            ScenceManager.Instance.CreateAlert(sceneItem);
        }
        else
        {
            ScenceManager.Instance.DestroyAlert(sceneItem);
        }
        //窗口关闭时，刷新小窗口信息
        sceneItem.GetComponent<ScenceItems>()?.RefreshMiniWindow();
        base.DoDismiss();
    }
    /// <summary>
    /// 关闭窗口
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="args"></param>
    public void Close(object sender, InteractionEventArgs args)
    {
        this.Dismiss();
        MainCameraController.Instance.mIsActiveRaycster = true;
        MainCameraController.Instance.mIsActive = true;
    }
    /// <summary>
    /// 清除数据记录
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="args"></param>
    public void ClearData(object sender, InteractionEventArgs args)
    {
        if (SqliteCtr.DbHelper.ExitItem("BaseInfo", "id", viewModel.Id))
        {
            SqliteCtr.DbHelper.Delete("BaseInfo", new string[] { "id" }, new string[] { viewModel.Id });
            viewModel.Name = string.Empty;
            viewModel.Info = string.Empty;
            viewModel.Image = string.Empty;
            viewModel.RelativeTable = string.Empty;
            viewModel.RelativeKey = string.Empty;
            viewModel.RelativeKeyValue = string.Empty;
        }
        viewModel.CloseCmd.Execute(null);
        sceneItem.GetComponent<ScenceItems>()?.RefreshMiniWindow();
    }
    /// <summary>
    /// 设置数据内容
    /// </summary>
    /// <param name="id"></param>
    /// <param name="name"></param>
    /// <param name="info"></param>
    /// <param name="image"></param>
    /// <param name="relativeTable"></param>
    /// <param name="relativeKey"></param>
    /// <param name="relativeKeyValue"></param>
    /// <param name="obj"></param>
    public void SetModel(string id,string name, string info, string image,string relativeTable,string relativeKey,string relativeKeyValue,GameObject obj)
    {
        this.viewModel.Id = id;
        this.viewModel.Name = name;
        this.viewModel.Info = info;
        this.viewModel.Image = image;
        this.viewModel.RelativeTable = relativeTable;
        this.viewModel.RelativeKey = relativeKey;
        this.viewModel.RelativeKeyValue = relativeKeyValue;
        this.sceneItem = obj;
    }
    /// <summary>
    /// 更新关联信息的协程
    /// </summary>
    /// <returns></returns>
    IEnumerator UpdateInfomation()
    {
        while (true)
        {
            if (originTable != viewModel.RelativeTable || (originTable == viewModel.RelativeTable &&originKeyValue != viewModel.RelativeKeyValue))
            {
                if (!string.IsNullOrEmpty(viewModel.RelativeTable))
                {
                    //TODO 关联的是监视器时，需要显示相应的按钮功能
                    if (viewModel.RelativeTable == "Monitor")
                    {
                        monitorButtonPannel.gameObject.SetActive(true);
                    }
                    else
                    {
                        monitorButtonPannel.gameObject.SetActive(false);
                    }
                    //TODO 关联的时阀门时，显示两个操作按钮
                    if (viewModel.RelativeTable == "Valve")
                    {
                        valveButtonPannel.gameObject.SetActive(true);
                    }
                    else
                    {
                        valveButtonPannel.gameObject.SetActive(false);
                    }
                    SqliteCtr.Instance.Reader = SqliteCtr.DbHelper.SelectByConditions(viewModel.RelativeTable, "*", new string[] { viewModel.RelativeKey }, new string[] { viewModel.RelativeKeyValue });
                    if (SqliteCtr.Instance.Reader.Read())
                    {
                        StringBuilder strB = new StringBuilder();
                        int count = SqliteCtr.Instance.Reader.FieldCount;
                        for (int i = 0; i < count; i++)
                        {
                            strB.AppendLine(SqliteCtr.Instance.Reader.GetValue(i).ToString());
                        }
                        relativeInformation.text = strB.ToString();
                        scrollView.SetActive(true);
                    }
                    else
                    {
                        relativeInformation.text = string.Empty;
                        scrollView.SetActive(false);
                    }
                    originTable = viewModel.RelativeTable;
                    originKeyValue = viewModel.RelativeKeyValue;
                }
                else
                {
                    relativeInformation.text = string.Empty;
                    scrollView.SetActive(false);
                    monitorButtonPannel.gameObject.SetActive(false);
                }
            }
            yield return new WaitForEndOfFrame();
        }
    }
    /// <summary>
    /// 清除数据提示窗口
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="args"></param>
    private void ClearDialogWindow(object sender, InteractionEventArgs args)
    {
        DialogNotification notification = args.Context as DialogNotification;
        var callback = args.Callback;

        if (notification == null)
            return;
        //显示消息框
        AlertDialog.ShowMessage(notification.Message, notification.Title, notification.ConfirmButtonText, null, notification.CancelButtonText, notification.CanceledOnTouchOutside, (result) =>
        {
            notification.DialogResult = result;
            //点击对应选项后的回调函数，该回调在vm中
            if (callback != null)
                callback();
        });
    }
}
